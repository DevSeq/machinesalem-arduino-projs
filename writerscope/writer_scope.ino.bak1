// text: machine
// scale: 6.28239359195854E-02
// data
const int M = 1; /* moveto */
const int L = 2; /* lineto */
const int Q = 3; /* quadratic_curve_to */
const int B = 4; /* bezier curve to */
const int data[] = {M,269,3,L,261,3,L,261,8,L,267,14,L,279,14,L,288,5,L,288,-31,L,269,-31,L,269,3,M,240,3,L,232,3,L,232,8,L,238,14,L,252,14,L,258,8,L,258,-31,L,240,-31,L,240,3,M,210,14,L,229,14,L,229,-31,L,210,-31,L,210,14,
M,326,3,L,299,3,L,299,9,L,305,14,L,333,14,L,345,3,L,345,-31,L,326,-31,L,326,3,M,296,-12,L,303,-4,L,323,-4,L,323,-13,L,314,-13,L,314,-20,L,323,-20,L,323,-25,L,318,-31,L,303,-31,L,296,-24,L,296,-12,
M,375,14,L,391,14,L,402,3,L,402,-4,L,383,-4,L,383,3,L,375,3,L,375,14,M,353,3,L,364,14,L,372,14,L,372,-31,L,364,-31,L,353,-20,L,353,3,M,375,-20,L,383,-20,L,383,-15,L,402,-15,L,402,-20,L,391,-31,L,375,-31,L,375,-20,
M,410,31,L,428,31,L,428,-31,L,410,-31,L,410,31,M,440,3,L,431,3,L,431,9,L,437,14,L,447,14,L,459,3,L,459,-31,L,440,-31,L,440,3,
M,467,32,L,486,32,L,486,20,L,467,20,L,467,32,M,467,14,L,486,14,L,486,-31,L,467,-31,L,467,14,
M,525,3,L,517,3,L,517,8,L,523,14,L,534,14,L,544,4,L,544,-31,L,525,-31,L,525,3,M,495,14,L,514,14,L,514,-31,L,495,-31,L,495,14,
M,574,-5,L,583,-5,L,583,3,L,574,3,L,574,14,L,590,14,L,601,3,L,601,-13,L,574,-13,L,574,-5,M,552,3,L,564,14,L,571,14,L,571,-31,L,564,-31,L,552,-20,L,552,3,M,574,-20,L,599,-20,L,599,-25,L,594,-31,L,574,-31,L,574,-20};




//const unsigned int data[] = { M,100,50, L,150,100, L,100,150, L,50,100, L,100,50, L,50,50, M,0,0, L,400,0, L,400,400, L,0,400, L,0,0 };
//const unsigned int data[] = { M,100,50, L,150,100, L,100,150, L,50,100, L,100,50, L,50,50 };
//const unsigned int data[] = { M,1,1, L,500,1, L,500,500, L,1,500 };

unsigned long tick = micros();

// code
const int maxx = 400;
const int maxy = 400;

const byte pinMoveX = 5;
const byte pinMoveY = 6;
const byte pinX = 9;
const byte pinY = 10;

int x = 0;
int y = 0;
int instr = 0;
int tgt_x = 0;
int tgt_y = 0;
boolean moving = false;
unsigned int point = 0;
unsigned int length = sizeof(data)/sizeof(int);
const boolean debug = false;
const unsigned long d = 0;


void setup()
{
  Serial.begin(19200);
  pinMode(pinMoveX,INPUT);
  pinMode(pinMoveY,INPUT);
  pinMode(pinX,OUTPUT);
  pinMode(pinY,OUTPUT);
}

void reset()
{
  x=0;
  y=0;
  
  pinMode(pinX,INPUT);
  pinMode(pinY,INPUT);
  digitalWrite( pinX, LOW );
  digitalWrite( pinY, LOW );

  pinMode( pinMoveX, OUTPUT );
  pinMode( pinMoveY, OUTPUT ); 
  digitalWrite( pinMoveX, LOW );
  digitalWrite( pinMoveY, LOW );
  
  delayMicroseconds(20);
  pinMode( pinMoveX, INPUT );
  pinMode( pinMoveY, INPUT ); 
  tick=micros();
}

void loop()
{
  while(micros()-tick<d) {};
  tick=micros();

  if(moving)
  {
    // Move closer to the target (horizontally or vertically or diagonally - no smart lines or curves yet!)
    if(x==tgt_x && y==tgt_y)
      moving=false;
    
    if( tgt_x<x )      { x=x-1; pinMode( pinX, OUTPUT ); digitalWrite( pinX, LOW ); }
    else if( tgt_x>x ) { x=x+1; pinMode( pinX, OUTPUT ); digitalWrite( pinX, HIGH ); }
    else               {        digitalWrite( pinX, LOW ); pinMode( pinX, INPUT ); }
    
    if( tgt_y<y )      { y=y-1; pinMode( pinY, OUTPUT ); digitalWrite( pinY, LOW ); }
    else if( tgt_y>y ) { y=y+1; pinMode( pinY, OUTPUT ); digitalWrite( pinY, HIGH ); }
    else               {        digitalWrite( pinY, LOW );pinMode( pinY, INPUT ); }
  }
  
  if(!moving)
  {
    // we arrived
    x = tgt_x;
    y = tgt_y;

    // next instruction
    point+=3;
    if( point>=length )
    {
      point=0;  //reset();
    }

    // read
    instr = data[point];
    tgt_x = maxx-data[point+1];
    tgt_y = maxy-data[point+2];
        
    // new mode
    if(instr==L)
      moving=true;
    else
      moving=true; //false; /* handle curves later! */
  }

  if(debug)
  {
    Serial.print("Point ");
    Serial.print(point);
    Serial.print(" of ");
    Serial.print(length);
    Serial.print(" (");
    Serial.write(1.0*instr);
    Serial.write(",");
    Serial.print(1.0*tgt_x);
    Serial.print(",");
    Serial.print(1.0*tgt_y);
    Serial.print(" at (");
    Serial.print(1.0*x);
    Serial.print(",");
    Serial.print(1.0*y);
    Serial.println(")\n" );
  }  

}


